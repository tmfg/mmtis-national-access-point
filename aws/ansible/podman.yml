---
 # Playbook can be used to build and deploy a systemd service, that runs a Podman container named napotedb163
 # Playbook will also rebuild and redeploy existing systemd service, that runs a Podman container named napotedb163
- name:  Build and deploy Podman Container napotedb163 as a persistent systemd service
  hosts: jenkins
  tasks:

    - name: Enable lingering for jenkins
      ansible.builtin.command:
        cmd: loginctl enable-linger jenkins
      become: true

    - name: Check if the repository exists
      stat:
        path: /home/jenkins/mmtis-national-access-point
      become: true
      register: repo_exists

    - name: Clone the repository if it does not exist
      git:
        repo: 'https://github.com/tmfg/mmtis-national-access-point.git'
        dest: /home/jenkins/mmtis-national-access-point/
      become: true
      when: not repo_exists.stat.exists
  
    - name: Get the Podman images as a list
      ansible.builtin.command:
        cmd: podman images --format "{{ '{{' }}.Repository{{ '}}' }}:{{ '{{' }}.Tag{{ '}}' }}"
      become: true
      become_user: jenkins
      register: image_check

    - name: Check if Podman image napotedb163 exists in the list
      ansible.builtin.debug:
        msg: "Image solita/napotedb163:latest exists."
      when: "'solita/napotedb163:latest' in image_check.stdout"

    - name: Build the Podman image napotedb163 if it does not exist
      ansible.builtin.shell: |
        cd /home/jenkins/mmtis-national-access-point/database && podman build -t solita/napotedb163:latest .
      when: "'solita/napotedb163:latest' not in image_check.stdout"
      become: true
      become_user: jenkins

    - name: Check if Podman container napotedb163 already exists
      ansible.builtin.command:
        cmd: podman ps -a --filter "name=napotedb163"
      become: true
      become_user: jenkins
      register: container_status_check
      ignore_errors: true

    - name: Debug container check output
      ansible.builtin.debug:
        var: container_status_check.stdout

    - name: Check if systemd service file for napotedb163 already exists
      stat:
        path: /etc/systemd/system/container-napotedb163.service
      become: true
      register: service_file

    - name: Stop system service for napotedb163 if already running
      systemd:
        name: container-napotedb163.service
        state: stopped
      become: true
      when: service_file.stat.exists

    - name: Stop the Podman container napotedb163 if still running
      ansible.builtin.command:
        cmd: podman stop napotedb163
      when: "'napotedb163' in  container_status_check.stdout"
      become: true
      become_user: jenkins

    - name: Remove the Podman Container napotedb163 if it exists
      ansible.builtin.command:
        cmd: podman rm napotedb163
      when: "'napotedb163' in  container_status_check.stdout"
      become: true
      become_user: jenkins

    - name: Create the Podman container napotedb163
      ansible.builtin.command:
        cmd: podman create --name napotedb163 -p 5432:5432 localhost/solita/napotedb163:latest
      become: true
      become_user: jenkins

    - name: Get the UID of the jenkins user
      ansible.builtin.shell: "getent passwd jenkins | cut -d: -f3"
      register: jenkins_uid
      become: true

    - name: Ensure runtime folder for jenkins user exists
      ansible.builtin.file:
        path: "/run/user/{{ jenkins_uid.stdout }}"
        state: directory
        owner: jenkins
        group: infra_admin
        mode: '0700'
      become: true

    - name: Update systemd service file for Podman container
      ansible.builtin.copy:
        dest: /etc/systemd/system/container-napotedb163.service
        content: |
          [Unit]
          Description=Podman container-napotedb163.service
          Documentation=man:podman-generate-systemd(1)
          Wants=network-online.target
          After=network-online.target
          StartLimitIntervalSec=60
          RequiresMountsFor=/tmp/containers-user-{{ jenkins_uid.stdout }}/containers

          [Service]
          Environment=XDG_RUNTIME_DIR=/run/user/{{ jenkins_uid.stdout }}
          User=jenkins
          Group=infra_admin
          Environment=PODMAN_SYSTEMD_UNIT=%n
          # Clean up temp files before start
          ExecStartPre=-/bin/rm -rf /tmp/containers-user-{{ jenkins_uid.stdout }}/containers
          ExecStartPre=-/bin/rm -rf /tmp/podman-run-{{ jenkins_uid.stdout }}/libpod/tmp
          Restart=on-failure
          RestartSec=5
          TimeoutStopSec=30
          ExecStart=/usr/bin/podman start -a napotedb163
          ExecStop=/usr/bin/podman stop -t 30 napotedb163
          KillMode=control-group
          Delegate=yes
          Type=simple

          [Install]
          WantedBy=default.target
        owner: root
        group: root
        mode: '0644'
      become: true

    - name: Restore SELinux context for systemd service file
      ansible.builtin.command:
        cmd: restorecon -v /etc/systemd/system/container-napotedb163.service
      become: true
      ignore_errors: true

    - name: Reload systemd daemon
      ansible.builtin.command:
        cmd: systemctl daemon-reload
      become: true

    - name: Enable and restart the system service for Podman container napotedb163
      ansible.builtin.systemd:
        name: container-napotedb163.service
        enabled: true
        state: restarted
      become: true
      when: not ansible_check_mode

    - name: Ensure Podman container napotedb163 is running
      ansible.builtin.command:
        cmd: podman ps --filter "name=napotedb163" --filter "status=running"
      become: true
      become_user: jenkins
      register: container_running_check

    - name: Debug Podman container napotedb163 status
      ansible.builtin.debug:
        var: container_running_check.stdout

    - name: Fail if the Podman container napotedb163 is not running
      ansible.builtin.fail:
        msg: "The container napotedb163 is not running!"
      become_user: jenkins
      when:
        - "'napotedb163' not in container_running_check.stdout"
        - not ansible_check_mode
